main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)개수:",
min = 1, max= 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distplot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기 시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bi",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bi",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bi + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session){
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {}
shinyApp(ui, server)
#------------------------------------------
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session){
shinyApp(ui,server)
}
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session){}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session){}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
[]
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("연비",min=0,max=35,value=c(0,10)))
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
server = function(input,output,session) {}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
head(faithful,2)
hist(faithful$waiting)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
textOutput("value")
server = function(input,output,session) {
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
length.out
input$range[1]
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)))
textOutput("value")
server = function(input,output,session) {
output$value = renderText((input$range[1]+input$range[2]))}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
textOutput("value"))
server = function(input,output,session) {
output$value = renderText((input$range[1]+input$range[2]))}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
textOutput("value"))
server = function(input,output,session) {
output$value = renderText((input$range[1]+input$range[2]))}
shinyApp(ui,server)
#------------------------------------------
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textInput("value")
)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
shinyApp(ui,server)
}
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = ((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
install.packages("DT")
install.packages("ggplot2")
library(DT)
library(ggplot2)
mpg =mpg
head(mpg)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table")
server = function(input,output,session){
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table")
server = function(input,output,session){
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table"))
server = function(input,output,session){
cty_sel = reactive({
cty_sel = subset(mpg,cty>= input$range[1] & cty <= input$range[2])
return(cty_sel)
})
output$table = DT::renderDataTable(cty_sel())
}
)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table"))
server = function(input,output,session){
cty_sel = reactive({
cty_sel = subset(mpg,cty>= input$range[1] & cty <= input$range[2])
return(cty_sel)
})
output$table = DT::renderDataTable(cty_sel())
}
shinyApp(ui,server)
ui = fluidPage(
fluidRow(
column(9,div(style = "height:450px;border: 4px solid red;","폭 9")),
column(3,div(style = "height:450px;border: 4px solid purple;","폭 3")),
column(12,div(style = "height:400px;border: 4px solid blue;","폭 12")),
)
)
server = function(input,output,session) {}
shinyApp(ui, server)
ui = fluidPage(
fluidRow(
column(9,div(style = "height:450px;border: 4px solid red;","폭 9")),
column(3,div(style = "height:450px;border: 4px solid purple;","폭 3")),
column(12,div(style = "height:400px;border: 4px solid blue;","폭 12")),
),
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table"))
server = function(input,output,session){
cty_sel = reactive({
cty_sel = subset(mpg,cty>= input$range[1] & cty <= input$range[2])
return(cty_sel)
})
output$table = DT::renderDataTable(cty_sel())
}
shinyApp(ui,server)
library(shiny)
ui = fluidPage("사용자 인터페이스")
server = function(input,output,session){}
shinyApp(ui,server)
library(shiny)
ui = fluidPage(inputId="사용자 인터페이스")
server = function(input,output,session){}
shinyApp(ui,server)
library(shiny)
ui = fluidPage("사용자 인터페이스")
server = function(input,output,session){}
shinyApp(ui,server)
runExample("01_hello")
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
ui <- fluidPage(
titlePanel("샤이니 1번 샘플"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "막대(bin)갯수:",
min = 1, max = 50,
value = 30)),
mainPanel(
plotOutput(outputId = "distPlot"))
))
server <- function(input, output, session){
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = 5, col = "#75AADB", border = "white",
xlab = "다음 분출때까지 대기시간(분)",
main = "대기시간 히스토그램")
})
}
shinyApp(ui,server)
length.out = input$bins + 1
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[1]+input$range[2]))
}
shinyApp(ui,server)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value = c(0,10)),
textOutput("value")
)
server = function(input,output,session){
output$value = renderText((input$range[2]))
}
shinyApp(ui,server)
library(DT)
library(ggplot2)
mpg =mpg
head(mpg)
ui = fluidPage(
sliderInput("range","연비",min=0,max=35,value=c(0,10)),
DT::dataTableOutput("table"))
server = function(input,output,session){
cty_sel = reactive({
cty_sel = subset(mpg,cty>= input$range[1] & cty <= input$range[2])
return(cty_sel)
})
output$table = DT::renderDataTable(cty_sel())
}
shinyApp(ui,server)
ui = fluidPage(
fluidRow(
column(9,div(style = "height:450px;border: 4px solid red;","폭 9")),
column(3,div(style = "height:450px;border: 4px solid purple;","폭 3")),
column(12,div(style = "height:400px;border: 4px solid blue;","폭 12")),
)
)
server = function(input,output,session) {}
shinyApp(ui, server)
ui = fluidPage(
fluidRow(
column(9,div(style = "height:450px;border: 4px solid red;","폭 9")),
column(3,div(style = "height:450px;border: 4px solid purple;","폭 3")),
column(12,div(style = "height:400px;border: 4px solid blue;","폭 12")),
)
)
server = function(input,output,session) {}
shinyApp(ui, server)
ui = fluidPage(
fluidRow(
column(9,div(style = "height:450px;border: 4px solid red;","폭 9")),
column(3,div(style = "height:450px;border: 4px solid purple;","폭 3")),
column(12,div(style = "height:400px;border: 4px solid blue;","폭 12")),
)
)
server = function(input,output,session) {}
shinyApp(ui, server)
library(ggplot2)
library(ggmap)
library(readxl)
library(dplyr)
setwd("C:\\Users\\DESKTOP\\Desktop\\work_new_R_2025")
register_google(key = "AIzaSyAaU3_jgZzYP7yT9iS9ElneCMBWSnSSxxw")
getwd()
#데이터준비  - 공공데이터 포털
files <- c("202403","202409","202503")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명", "상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
for (i in 1:length(files)) {
filename <- paste("seoul_", files[i], ".csv", sep="")
cat("read ", filename, "...\n") # 읽을 파일 이름 출력
ds <- read.csv(filename) # 엑셀 파일 읽기
ds <- data.frame(ds) # 데이터프레임으로 변환
ds <- ds[,columns] # 분석에 필요한 변수만 추출
ds$수집연월 <- rep(files[i], nrow(ds)) # 데이터 수집 시점
ds.total <- rbind(ds.total,ds) # 데이터 통합
}
register_google(key = "AIzaSyC8s3TLTpwZ5tMWFSfGgE9Ip24qbd62_f4")
#역삼1동 커피 상권 분석
ds.yeoksam.coffee <- subset(ds.yeoksam, ds.yeoksam$상권업종소분류명=="카페")
coffee_202403 <- subset(ds.total,행정동명 == "역삼1동"&수집연월 == 202403& 상권업종소분류명 == "카페")
coffee_202503 <- subset(ds.total, 행정동명 == "역삼1동"&수집연월 == 202503& 상권업종소분류명 == "카페")
head(coffee_202503)
새로 생긴 카페
# 새로 생긴 카페
new_cafes <- subset(coffee_202503, !(상가업소번호 %in% coffee_202403$상가업소번호))
nrow(new_cafes)
nrow(closed_cafes)
# 두 시점에서 '카페' 점포만 필터링
coffee_202403 <- subset(ds.total,행정동명 == "역삼1동"&수집연월 == 202403& 상권업종소분류명 == "카페")
coffee_202503 <- subset(ds.total, 행정동명 == "역삼1동"&수집연월 == 202503& 상권업종소분류명 == "카페")
head(coffee_202503)
# 새로 생긴 카페
new_cafes <- subset(coffee_202503, !(상가업소번호 %in% coffee_202403$상가업소번호))
nrow(new_cafes)
nrow(closed_cafes)
nrow(closed_cafes)
# 사라진 카페
closed_cafes <- subset(coffee_202403, !(상가업소번호 %in% coffee_202503$상가업소번호))
# 중심 좌표 설정
cen <- c(mean(coffee_202503$경도), mean(coffee_202503$위도))
map <- get_googlemap(center = cen, maptype = "roadmap", zoom = 15, size = c(640, 640))
gmap <- ggmap(map)
# 시각화
gmap +
geom_point(data = new_cafes, aes(x = 경도, y = 위도),
size = 2, alpha = 0.6, color = "forestgreen") +  # 새로 생긴 카페 (초록)
geom_point(data = closed_cafes, aes(x = 경도, y = 위도),
size = 2, alpha = 0.6, color = "red") +  # 사라진 카페 (빨강)
labs(title = "역삼1동 1년간 카페 상권 변동",
subtitle = "사라진 지점:126 , 새로 생긴 지점 : 159",
x = "Longitude", y = "Latitude") +
theme(plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12))
# 시각화
gmap +
geom_point(data = new_cafes, aes(x = 경도, y = 위도),
size = 3, alpha = 0.6, color = "forestgreen") +  # 새로 생긴 카페 (초록)
geom_point(data = closed_cafes, aes(x = 경도, y = 위도),
size = 3, alpha = 0.6, color = "red") +  # 사라진 카페 (빨강)
labs(title = "역삼1동 1년간 카페 상권 변동",
subtitle = "사라진 지점:126 , 새로 생긴 지점 : 159",
x = "Longitude", y = "Latitude") +
theme(plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12))
